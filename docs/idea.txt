Sid: Say its done
=================
Sid is a system that allows you to specify an application to the level you're comfortable, and then asks you the question:
    "Ok, *say all that's done*, now...
    * how is feature x implemented?"
    * what goes into component x? Is is built? Or just used? Or bought?"
    * how does the architecture look like?"
it therefore servers as a documentation of architecture, and (much like BDD does for features) allows thinking about the architecture in a lightweight fashion.
it also helps to validate some of the dependencies between aspects of architecture by allowing expression of those dependencies.

Sid is, therefore:
* a file format to specify the early architecture of an app
* a tool that reads said file format and:
** displays it
** processes it to ask questions such as:
*** what features does your application have? what capabilities?
*** what logical componenents are required to meet those features and capabilities?
*** how would the logical components fit together?
*** how would you realize the logical components? what would you build and/or buy/reuse?
* (future) a tool that consolidates accross multiple sid files and generates a project roadmap
* (future) a tool to extract out BDD-style feature definitions from the sid spec.

Audience
--------
* developers starting on their pet projects who want a bit of definition around their initial architecture thinking
* organizations where wikis are used, and need a lightweight project description/validation tool

Rough syntax:
============
To build <<AppX>>
    version x
    with features
        feature <<f1>>
        feature <<f2>>
        feature <<f3>>
    and capabilities
        capability <<c1>>
        capability <<c2>>
        capability <<c3>>
    given
        - constraint1
        - constraint2
    
    requires
        defining <<new concept1>>
        using <<physical component1>>
        using <<physical component2>>
        building <<logical component3>>
    
    realizing architecture
        <<graphviz edge definitions here>>
        
    To build &<<logical component3>>
        <<feature spec repeats here>>
    

Notes:
* and and with will be synonyms when present before "features" or "capabilites"
* the & above is a reference to the aforementioned component
* the "and is fully defined" is a marker that the application is fully defined based on the components identified in the requires section *AT THIS LEVEL*. sid will evaluate this value all the way through the child components asking the same question "say its done, then is there something else unspecified or underspecified?", and show a result based on that.

YAML version
------------
to-build: appx
    version: x
    with-features:
        - f1
        - f2
        - f3
    and-capabilities:
        - c1
        - c2
        - c3
    given:
        - constraint1
        - constraint2
        
    requires:
        defining:
            - thing to be defined 1
            - thing to be defined 2
        using:
            - pc1
            - pc2
            - pc3
        and-building:
            - &lc3
    
    realizing-architecture:
        - <<graphviz edge defn 1 here>>
        - <<graphviz edge defn 2 here>>
    
    to-build: *lc3
        ... spec format repeats
    is-defined: yes
        
Dogfood
=======
see sid-v*.sid

Todos:
======
* Add css and explanatory text to html
* Add logic to display child component definitions
