digraph G{
        node[shape=box style="rounded,filled" fontname=Sans fillcolor="#ccccff"]  //i'm terrible partial to to perrywinkle blue ;)
        //compound=true
        //rankdir=LR
        //outputMode=nodesfirst
        <%
        arch = root['realizing-architecture'] 
        
        layers = (arch.class == Hash and arch.has_key? 'layers') ? arch['layers'] : nil
        relations = (arch.class == Hash and arch.has_key? 'relations') ? arch['relations'] : arch
        relations = nil if relations.class == Hash 
        
        # output the layers themselves to setup the hierarchy
        if layers
        %>
        //node[colorscheme=spectral<%=layers.length % 9%>]
        {
          node [shape=plaintext]
          edge [style=invis]
        <%
          nodes=[]
          layers.each do |layer|
            nodes.push(layer.keys[0])
          end
        %>
        <%=nodes.join(" -> ")%>
        }
        <%

        # now output the actual components in the layers. the presence of the lname node "anchors" the other components in the same rank to that level in the display
        # calculate a random color, but make it so that multiple runs will produce the same colors so there's no refresh shock upon viewing
        srand(layers.length)  #make it dependent on the number of layers
        alpha = 'bb'
        layers.each_index do |i|
          color = '#'
          6.times do|c|
            color += (rand * 16 ).to_i.to_s(16)
          end
          color += alpha
          
          color="#ccccff" + alpha if i==layers.length # i'm terrible partial to to perrywinkle blue ;)
          
          layers[i].each_pair do |lname,components|
        %>
        {
          node[fillcolor="<%=color%>"]
          // layer name's color needs to be overridden here else the top level color will inherit.
          rank=same;<%=lname%>[color=none fontcolor="<%=color%>" fillcolor=none];<%=components.join(';')%>
        };
        <%    
          end
        end 
      end #if layers
      
        relations.each do |line|
        #tried scan to allow for quoted strings. while this works here, yaml doesnt allow parts of an array entry being quoted. so reverting back to old split by space logic. g
        #words = line.scan(/('.*?'|".*?"|\S+)/)
        # scan returns an array of matched arrays, so each word must be got as the first element of each group found
        #component1 = words[0][0]
        #relation = words[1][0]
        #component2 = words[2][0]
        #ignore any more.
        words = line.split
        component1 = words[0]
        relation = words[1]
        component2 = words[2]
        #ignore any more.
      
%>
    <%=component1%> -> <%=component2%> [label="<%=relation%>",color=gray, fontname=Sans fontsize="10"]
      <%end if relations%>
}
